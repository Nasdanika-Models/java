var searchDocuments = {"references/eClassifiers/ClassInitializer/inheritance.html":{"path":"ClassInitializer/Inheritance","action-uuid":"75a2a307-b287-4e6f-b3a7-a3ca633e7fff","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Class/inheritance.html":{"path":"Class/Inheritance","action-uuid":"043483c1-a2aa-44f9-ad8f-abee7862ffee","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/BlockComment/inheritance.html":{"path":"BlockComment/Inheritance","action-uuid":"8c64e9a6-e278-4c1c-817c-588875cc7cb1","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/AnnotationInterfaceMember/inheritance.html":{"path":"AnnotationInterfaceMember/Inheritance","action-uuid":"e947e093-1dff-42a1-a40a-2d177eaa85ca","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Parameter/inheritance.html":{"path":"Parameter/Inheritance","action-uuid":"88cfdbe1-967c-47cd-9b50-1b914ca2b77c","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Method/inheritance.html":{"path":"Method/Inheritance","action-uuid":"11799247-c4b0-439c-8607-a3586c5c3aba","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/NamedElement/references/eStructuralFeatures/fullyQualifiedName/index.html":{"path":"NamedElement/Attributes/fullyQualifiedName","action-uuid":"d5cf261e-59a3-4c6e-aff7-b5df7745ea37","title":"fullyQualifiedName","content":"Fully qualified name where applicable. E.g. java.util.Map"},"references/eClassifiers/LineComment/inheritance.html":{"path":"LineComment/Inheritance","action-uuid":"19cf1961-30d4-44a9-92cd-a42bc05a6d78","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/CompilationUnit/inheritance.html":{"path":"CompilationUnit/Inheritance","action-uuid":"712b9bf1-e92e-4fa8-acc6-ff7ac8e976b3","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/TypeParameter/inheritance.html":{"path":"TypeParameter/Inheritance","action-uuid":"5a8dd286-df98-4064-a864-3f23296a1b75","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Record/inheritance.html":{"path":"Record/Inheritance","action-uuid":"1311a503-a930-4678-bc29-3cd3ff77ae3d","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Comment/inheritance.html":{"path":"Comment/Inheritance","action-uuid":"7977c2d2-988f-461e-80be-51701d210600","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/NamedElement/inheritance.html":{"path":"NamedElement/Inheritance","action-uuid":"10672142-e935-42a6-8a3d-7606db7cfce1","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/Package/inheritance.html":{"path":"Package/Inheritance","action-uuid":"ab73b401-8fa9-4ee5-962b-8b397b4fa858","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Interface/inheritance.html":{"path":"Interface/Inheritance","action-uuid":"186f3c07-e7ca-4c91-81aa-00c1c83e59a4","title":"Inheritance","content":"Supertypes "},"index.html":{"action-uuid":"8978b4e7-7539-4cda-88cf-afd00ce1274f","title":"Java","content":"Nasdanika Java model can be used for analysis and code generation. It can be loaded from source files, class files and jar files. Model elements can reference coverage results. Model elements can be referenced from other models. For example, Maven project may reference a Java Module. File/resource top-level model elements, such as compilation units for *.java files and types for *.class files, are loaded as resources. It allows to use custom URI handlers to load resources from different sources. For example, GitLabURIHandler can be used to load sources from GitLab repositories using REST API, without cloning, and commit modifications to GitLab. Logical URI&rsquo;s, e.g. java://classes/org/nasdanika/common/Util may be used to reference model elements. Such logical URI&rsquo;s would be resolved to physical URI&rsquo;s, which may be different in different contexts - java sources or class files. Java model elements may be extended (subclassed) and subclasses can be loaded instead of the base classes. In the above example of a Maven project referencing a Java module, instead of a reference there might be a class, say MavenJar, extending both Maven project and Java module. Another example might be a JavaTextRepositoryFile extending both GitLab TextRepositoryFile and CompilationUnit. Yet another example, which might be combined with the above examples, is a class extending Maven project, Java module, and Architecture element This model is coarse-grained - it provides classes representing high-level &ldquo;externally referenceable&rdquo; constructs of the Java language. Low-level constructs such as statements and expressions are not modeled. Also, the model is somewhat loose on purpose to simplify code generation. For example, a source child can be added to any subclass of Source and source can be set to any text. &ldquo;[All models are wrong, but some are useful]&rdquo;. By omitting low-level details this model is wrong to be useful for its intended purpose - high level analysis, cross-referencing with non-java entities and source code generation. The below diagram shows key model classes and their relationships. Some intermediate classes are omitted in the inheritance hierarchy. See the full diagram for additional details. Maven dependency Maven Central Entry &lt;dependency&gt;\n    &lt;groupId&gt;org.nasdanika.models.java&lt;/groupId&gt;\n    &lt;artifactId&gt;model&lt;/artifactId&gt;\n    &lt;version&gt;latest version from Maven Central&lt;/version&gt;\n&lt;/dependency&gt;\n Javadoc Latest Loading From sources Individual sources ResourceSet resourceSet = new ResourceSetImpl();\nresourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(&quot;java&quot;, new JavaParserResourceFactory());\t\t\n\t\t\nString javaPackagePath = new File(&quot;src/main/java/org/nasdanika/models/java/JavaPackage.java&quot;).getCanonicalPath();\nResource javaPackageResource = resourceSet.getResource(URI.createFileURI(javaPackagePath), true);\n Directory public void loadSourceDirectory() throws IOException {\n\tResourceSet resourceSet = new ResourceSetImpl();\n\tresourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(&quot;java&quot;, new JavaParserResourceFactory());\t\t\n\n\t// For loading directory contents\n\tresourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());\t\t\n\tURIHandler fileDirectoryURIHandler = new DirectoryContentFileURIHandler();\n\tresourceSet.getURIConverter().getURIHandlers().add(0, fileDirectoryURIHandler);\n\t\n\t\n\tString javaSourcesPath = new File(&quot;src/main/java&quot;).getCanonicalPath();\n\tResource javaSourcesResource = resourceSet.getResource(URI.createFileURI(javaSourcesPath), true);\n\tfor (EObject root: javaSourcesResource.getContents()) {\n\t\tvisit(root);\n\t}\t\t\n}\n\nprivate void visit(EObject eObject) {\n\tSystem.out.println(eObject);\n\tif (eObject instanceof TreeItem) {\n\t\tSystem.out.println(((TreeItem) eObject).getName());\n\t}\n\tif (eObject instanceof Tree) {\n\t\tfor (TreeItem treeItem: ((Tree) eObject).getTreeItems()) {\n\t\t\tURI itemURI = URI.createURI(treeItem.getName()).resolve(eObject.eResource().getURI().appendSegment(&quot;&quot;));\n\t\t\tResource itemResource = eObject.eResource().getResourceSet().getResource(itemURI, true);\n\t\t\tfor (EObject root: itemResource.getContents()) {\n\t\t\t\tvisit(root);\n\t\t\t}\t\t\n\t\t}\n\t}\t\t\n}\n\n With coverage File projectDir = new File(&quot;&lt;path to a Maven project directory&quot;);\nFile jacocoExec = new File(projectDir, &quot;target/jacoco.exec&quot;);\nResourceSet resourceSet = new ResourceSetImpl();\t\t\nresourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());\nModuleCoverage moduleCoverage = ModuleCoverage.loadJacoco(&quot;&lt;module name&gt;&quot;, jacocoExec, new File(projectDir, &quot;target/classes&quot;));\n\t\t\nresourceSet\n\t.getResourceFactoryRegistry()\n\t.getExtensionToFactoryMap()\n\t.put(\n\t\t&quot;java&quot;, \n\t\tnew JavaParserResourceFactory(new ModuleCoverageProvider(moduleCoverage)));\t\t\n\n...\n From class files TODO From jar files TODO Generation Source Low-level example - TODO - test case Compilation Unit Use Cases Analysis and documentation/code generation Nasdanika Rules has a demo of inspecting Java sources and then generating test classes using OpenAI chat completions. Sources are retrieved from GitLab and generated test classes are committed to GitLab. The Java model combines both source and bytecode information, such as calls method makes, fields it accesses, or callers of a method. This information may be used to generate documentation and visualizations such as UML diagrams. It can also be used as part of GenAI prompts to generate documentation, recommendations, or test code. In the later case coverage information can be used to generate tests for classes and methods with low coverage. Some insights which might be provided by Java analysis: Module - removal of direct dependencies if there is a transient dependency. Say C depends on A and B, B has A as a transitive dependency. There is no need for C to have a direct dependency on A - it doesn&rsquo;t hurt, though. Circular dependencies between packages. Sometimes such dependencies are inevitable, so this &ldquo;rule&rdquo; shall be parameterizable. E.g. exclude child packages, or have an annotation to indicate that a circular dependency is by design, similar to SuppressWarning annotation. Code generation Nasdanika Function Flow leverages the Java model to generate code for Java source activities. GenAI is used to generate code from high level descriptions (specification) and contextual information. Source Compilation Unit Package Module Member Type Field Code Operation Method Constructor Class Interface Enum Annotation Interface Record Annotation Interface Member EnumConstant Initializer Class Initializer"},"references/eClassifiers/Code/inheritance.html":{"path":"Code/Inheritance","action-uuid":"e46ac9f2-73dd-48c6-87a3-a7ecb2a2f043","title":"Inheritance","content":"Supertypes Subtypes  "},"glossary.html":{"action-uuid":"d47bbe57-b771-4ccd-a89c-563350bc32c3","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"references/eClassifiers/Reference/references/eStructuralFeatures/target/index.html":{"path":"Reference/References/target","action-uuid":"ad4e8752-b04f-44b3-8654-525be6ab1c79","title":"target","content":"Referenced named element (symbol)"},"references/eClassifiers/EnumConstant/inheritance.html":{"path":"EnumConstant/Inheritance","action-uuid":"cf86cd9d-f4d2-42cf-a1d1-d0dd19390631","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Field/inheritance.html":{"path":"Field/Inheritance","action-uuid":"0a8fe7cc-c122-4c9f-9472-2d263a273ef5","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/GenericType/inheritance.html":{"path":"GenericType/Inheritance","action-uuid":"5f3b5836-03fa-47fd-8b1c-8f37f9a8ae02","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Type/inheritance.html":{"path":"Type/Inheritance","action-uuid":"dab49537-dbc8-4d99-9748-1b5ce8dfea49","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/Initializer/inheritance.html":{"path":"Initializer/Inheritance","action-uuid":"e271d853-7435-4f8c-8489-8c8a35809340","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/JavadocComment/inheritance.html":{"path":"JavadocComment/Inheritance","action-uuid":"73f344aa-1be6-4acb-8703-5947f1da3fc7","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Module/inheritance.html":{"path":"Module/Inheritance","action-uuid":"be65e43f-98c6-49c9-9c72-6e0aca781845","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Source/inheritance.html":{"path":"Source/Inheritance","action-uuid":"bfb30bc7-71a2-460e-b8ae-74e68eb204c4","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/Constructor/inheritance.html":{"path":"Constructor/Inheritance","action-uuid":"aec21612-7dc2-4e83-8663-f8ebdf5223d2","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/NamedElement/references/eStructuralFeatures/name/index.html":{"path":"NamedElement/Attributes/name","action-uuid":"a813e5e9-4c62-4339-a70b-99b0ce525b0f","title":"name","content":"Simple (short) name. E.g. Map"},"references/eClassifiers/TypedElement/inheritance.html":{"path":"TypedElement/Inheritance","action-uuid":"b6efe207-c05f-4d9d-9380-f5dc03aee4cd","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/Member/inheritance.html":{"path":"Member/Inheritance","action-uuid":"bef72b68-acae-4745-bcf4-b795c1aec491","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/Operation/inheritance.html":{"path":"Operation/Inheritance","action-uuid":"d88b00c0-f1ff-48da-8087-9601029f3dd6","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/Type/references/eStructuralFeatures/permits/index.html":{"path":"Type/References/permits","action-uuid":"c73e0378-c743-4956-98fd-cff9f3a31617","title":"permits","content":"For classes the first element is the superclass and the rest are implemented interfaces"},"references/eClassifiers/Type/references/eStructuralFeatures/superTypes/index.html":{"path":"Type/References/superTypes","action-uuid":"abcf8a9e-72d5-41b7-a6e3-d77e3617efea","title":"superTypes","content":"For classes the first element is the superclass and the rest are implemented interfaces"},"references/eClassifiers/Annotation/inheritance.html":{"path":"Annotation/Inheritance","action-uuid":"dd4f610b-f3bd-450d-a0e3-c4748c2f0bda","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Enum/inheritance.html":{"path":"Enum/Inheritance","action-uuid":"3f8315ce-1b92-43a0-919d-4670565cc63d","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/AnnotationInterface/inheritance.html":{"path":"AnnotationInterface/Inheritance","action-uuid":"3aafa84b-6249-4cd5-85f5-5b67871edf27","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Member/references/eStructuralFeatures/referencedTypes/index.html":{"path":"Member/References/referencedTypes","action-uuid":"3a1aa48a-9704-421b-b2df-7db994503fdc","title":"referencedTypes","content":"All types referenced by this member including types refernced from code"},"references/eClassifiers/Reference/inheritance.html":{"path":"Reference/Inheritance","action-uuid":"e2440031-3935-4eb1-90df-1a7c71a6c8bb","title":"Inheritance","content":"Supertypes Subtypes  "}}